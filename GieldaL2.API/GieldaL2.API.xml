<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GieldaL2.API</name>
    </assembly>
    <members>
        <member name="T:GieldaL2.API.Controllers.AuthController">
            <summary>
            Authentication controller containing endpoints to check user identity and generating JWT tokens.
            </summary>
        </member>
        <member name="M:GieldaL2.API.Controllers.AuthController.#ctor(GieldaL2.INFRASTRUCTURE.Interfaces.IAuthService)">
            <summary>
            Initializes a new instance of the <see cref="T:GieldaL2.API.Controllers.AuthController"/> class.
            </summary>
            <param name="authService">Authentication service.</param>
        </member>
        <member name="M:GieldaL2.API.Controllers.AuthController.LogIn(GieldaL2.API.ViewModels.View.LogInViewModel)">
            <summary>
            Authenticates user and generates JWT token if passed data is valid.
            </summary>
            <param name="viewModel">Authentication data.</param>
            <returns>Flag indicating if authentication has been done with success and JWT token.</returns>
        </member>
        <member name="T:GieldaL2.API.Controllers.ContextController">
            <summary>
            Context controller containing endpoints which retrieves full data about the user.
            </summary>
        </member>
        <member name="M:GieldaL2.API.Controllers.ContextController.#ctor(GieldaL2.INFRASTRUCTURE.Interfaces.IUserService,GieldaL2.INFRASTRUCTURE.Interfaces.IBuyOfferService,GieldaL2.INFRASTRUCTURE.Interfaces.ISellOfferService)">
            <summary>
            Initializes a new instance of the <see cref="T:GieldaL2.API.Controllers.ContextController"/> class.
            </summary>
            <param name="userService">User service.</param>
            <param name="buyOfferService">Buy offer service.</param>
            <param name="sellOfferService">Sell offer service.</param>
        </member>
        <member name="M:GieldaL2.API.Controllers.ContextController.Get">
            <summary>
            Retrieves user and his offers/shares (based on the JWT token).
            </summary>
            <returns>User data and his offers/shares.</returns>
        </member>
        <member name="T:GieldaL2.API.Controllers.OffersController">
            <summary>
            Controller for handling all of the sell offer and buy offer operations
            </summary>
        </member>
        <member name="M:GieldaL2.API.Controllers.OffersController.GetSell">
            <summary>
            Retrieves list of all sell offers
            </summary>
            <returns>List of sell offers</returns>
        </member>
        <member name="M:GieldaL2.API.Controllers.OffersController.GetSell(System.Int32)">
            <summary>
            Retrieves specified sell offer
            </summary>
            <param name="id">sell offer id</param>
            <returns>offer with specified id</returns>
        </member>
        <member name="M:GieldaL2.API.Controllers.OffersController.PostSell(GieldaL2.API.ViewModels.Edit.EditSellOfferViewModel)">
            <summary>
            Adds sell offer passed in request body
            </summary>
            <param name="sellOffer">Sell offer to add</param>
            <returns>Backend statistics</returns>
        </member>
        <member name="M:GieldaL2.API.Controllers.OffersController.DeleteSell(System.Int32)">
            <summary>
            Deletes sell offer specified by id
            </summary>
            <param name="id">id of sell offer to delete</param>
            <returns>backend statistics</returns>
        </member>
        <member name="M:GieldaL2.API.Controllers.OffersController.GetBuy">
            <summary>
            Retrieves list of all buy offers
            </summary>
            <returns>List of buy offers</returns>
        </member>
        <member name="M:GieldaL2.API.Controllers.OffersController.GetBuy(System.Int32)">
            <summary>
            Retrieves specified buy offer
            </summary>
            <param name="id">buy offer id</param>
            <returns>offer with specified id</returns>
        </member>
        <member name="M:GieldaL2.API.Controllers.OffersController.PostBuy(GieldaL2.API.ViewModels.Edit.EditBuyOfferViewModel)">
            <summary>
            Adds buy offer passed in request body
            </summary>
            <param name="buyOffer">Buy offer to add</param>
            <returns>backend statistics</returns>
        </member>
        <member name="M:GieldaL2.API.Controllers.OffersController.DeleteBuy(System.Int32)">
            <summary>
            Deletes buy offer specified by id
            </summary>
            <param name="id">id of buy offer to delete</param>
            <returns>backend statistics</returns>
        </member>
        <member name="T:GieldaL2.API.Controllers.SharesController">
            <summary>
            Shares controller containing endpoints to manage user shares.
            </summary>
        </member>
        <member name="M:GieldaL2.API.Controllers.SharesController.Get">
            <summary>
            Retrieves a list of all shares.
            </summary>
            <returns>List of the all shares and backend statistics.</returns>
        </member>
        <member name="M:GieldaL2.API.Controllers.SharesController.Get(System.Int32)">
            <summary>
            Retrieves share with the specified ID.
            </summary>
            <param name="id">ID of the requested share.</param>
            <returns>Share with the specified ID and backend statistics if success, otherwise 404 when not found.</returns>
        </member>
        <member name="M:GieldaL2.API.Controllers.SharesController.Post(GieldaL2.API.ViewModels.Edit.EditShareViewModel)">
            <summary>
            Adds share offer passed in the request body.
            </summary>
            <param name="model">Share which will be added.</param>
            <returns>Backend statistics.</returns>
        </member>
        <member name="M:GieldaL2.API.Controllers.SharesController.Put(System.Int32,GieldaL2.API.ViewModels.Edit.EditShareViewModel)">
            <summary>
            Edits share with the specified ID.
            </summary>
            <param name="id">ID of the share which will be edited.</param>
            <param name="model">New data which will be applied to the share.</param>
            <returns>Backend statistics if share has been modified with success, otherwise 404 if not found.</returns>
        </member>
        <member name="M:GieldaL2.API.Controllers.SharesController.Delete(System.Int32)">
            <summary>
            Deletes share with the specified ID.
            </summary>
            <param name="id">ID of the share which will be deleted.</param>
            <returns>Backend statistics if share has been deleted with success, otherwise 404 if not found.</returns>
        </member>
        <member name="T:GieldaL2.API.Controllers.StocksController">
            <summary>
            Stocks controller containing endpoints to manage stocks.
            </summary>
        </member>
        <member name="M:GieldaL2.API.Controllers.StocksController.Get">
            <summary>
            Retrieves a list of all stocks.
            </summary>
            <returns>List of the all stocks and backend statistics.</returns>
        </member>
        <member name="M:GieldaL2.API.Controllers.StocksController.Get(System.Int32)">
            <summary>
            Retrieves stock with the specified ID.
            </summary>
            <param name="id">ID of the requested stock.</param>
            <returns>Stock with the specified ID and backend statistics if success, otherwise 404 when not found.</returns>
        </member>
        <member name="M:GieldaL2.API.Controllers.StocksController.GetBuyOffers(System.Int32)">
            <summary>
            Retrieves buy offers in the stock stock with the specified ID.
            </summary>
            <param name="id">ID of the requested stock.</param>
            <returns>Buy offers in the stock with the specified ID and backend statistics if success, otherwise 404 when not found.</returns>
        </member>
        <member name="M:GieldaL2.API.Controllers.StocksController.GetSellOffers(System.Int32)">
            <summary>
            Retrieves sell offers in the stock stock with the specified ID.
            </summary>
            <param name="id">ID of the requested stock.</param>
            <returns>Sell offers in the stock with the specified ID and backend statistics if success, otherwise 404 when not found.</returns>
        </member>
        <member name="M:GieldaL2.API.Controllers.StocksController.Post(GieldaL2.API.ViewModels.Edit.EditStockViewModel)">
            <summary>
            Adds stock passed in the request body.
            </summary>
            <param name="model">Stock which will be added.</param>
            <returns>Backend statistics.</returns>
        </member>
        <member name="M:GieldaL2.API.Controllers.StocksController.Put(System.Int32,GieldaL2.API.ViewModels.Edit.EditStockViewModel)">
            <summary>
            Edits stock with the specified ID.
            </summary>
            <param name="id">ID of the stock which will be edited.</param>
            <param name="model">New data which will be applied to the stock.</param>
            <returns>Backend statistics if stock has been modified with success, otherwise 404 if not found.</returns>
        </member>
        <member name="M:GieldaL2.API.Controllers.StocksController.Delete(System.Int32)">
            <summary>
            Deletes stock with the specified ID.
            </summary>
            <param name="id">ID of the stock which will be deleted.</param>
            <returns>Backend statistics if stock has been deleted with success, otherwise 404 if not found.</returns>
        </member>
        <member name="T:GieldaL2.API.Controllers.TransactionsController">
            <summary>
            Controller that includes endpoints for transactions
            </summary>
        </member>
        <member name="M:GieldaL2.API.Controllers.TransactionsController.Get">
            <summary>
            Action that returns Collection of TransactionViewModels
            </summary>
            <returns>Collection of Transaction ViewModels</returns>
        </member>
        <member name="M:GieldaL2.API.Controllers.TransactionsController.Get(System.Int32)">
            <summary>
            Action that returns specific TransactionViewModel
            </summary>
            <param name="id">identifier of transaction</param>
            <returns>Singular Transaction ViewModel</returns>
        </member>
        <member name="M:GieldaL2.API.Controllers.TransactionsController.Post(GieldaL2.API.ViewModels.View.TransactionViewModel)">
            <summary>
            Adds transaction passed in the request body.
            </summary>
            <param name="transaction">Transaction which will be added.</param>
            <returns>Backend statistics.</returns>
        </member>
        <member name="M:GieldaL2.API.Controllers.TransactionsController.Delete(System.Int32)">
            <summary>
            Deletes transaction with the specified ID.
            </summary>
            <param name="id">ID of the transaction which will be deleted.</param>
            <returns>Backend statistics if transaction has been deleted with success, otherwise 404 if not found.</returns>
        </member>
        <member name="T:GieldaL2.API.Controllers.UsersController">
            <summary>
            Users controller containing endpoints to manage users.
            </summary>
        </member>
        <member name="M:GieldaL2.API.Controllers.UsersController.#ctor(GieldaL2.INFRASTRUCTURE.Interfaces.IUserService,GieldaL2.INFRASTRUCTURE.Interfaces.IBuyOfferService,GieldaL2.INFRASTRUCTURE.Interfaces.ISellOfferService)">
            <summary>
            Initializes a new instance of the <see cref="T:GieldaL2.API.Controllers.UsersController"/> class.
            </summary>
            <param name="userService">User service.</param>
            <param name="buyOfferService">Buy offers service.</param>
            <param name="sellOfferService">Sell offers service.</param>
        </member>
        <member name="M:GieldaL2.API.Controllers.UsersController.Get">
            <summary>
            Retrieves a list of all users.
            </summary>
            <returns>List of the all users and backend statistics.</returns>
        </member>
        <member name="M:GieldaL2.API.Controllers.UsersController.Get(System.Int32)">
            <summary>
            Retrieves user with the specified ID.
            </summary>
            <param name="id">ID of the requested user.</param>
            <returns>User with the specified ID and backend statistics if success, otherwise 404 when not found.</returns>
        </member>
        <member name="M:GieldaL2.API.Controllers.UsersController.GetShares(System.Int32)">
            <summary>
            Retrieves shares assigned to the specified user.
            </summary>
            <param name="id">User ID.</param>
            <returns>Shares of the specified user.</returns>
        </member>
        <member name="M:GieldaL2.API.Controllers.UsersController.GetSellOffers(System.Int32)">
            <summary>
            Retrieves sell offers assigned to the specified user.
            </summary>
            <param name="id">User ID.</param>
            <returns>Sell offers of the specified user.</returns>
        </member>
        <member name="M:GieldaL2.API.Controllers.UsersController.GetBuyOffers(System.Int32)">
            <summary>
            Retrieves buy offers assigned to the specified user.
            </summary>
            <param name="id">User ID.</param>
            <returns>Buy offers of the specified user.</returns>
        </member>
        <member name="M:GieldaL2.API.Controllers.UsersController.Post(GieldaL2.API.ViewModels.Edit.EditUserViewModel)">
            <summary>
            Adds user passed in the request body.
            </summary>
            <param name="user">User which will be added.</param>
            <returns>Backend statistics.</returns>
        </member>
        <member name="M:GieldaL2.API.Controllers.UsersController.Put(System.Int32,GieldaL2.API.ViewModels.Edit.EditUserViewModel)">
            <summary>
            Edits user with the specified ID.
            </summary>
            <param name="id">ID of the user which will be edited.</param>
            <param name="user">New data which will be applied to the user.</param>
            <returns>Backend statistics if user has been modified with success, otherwise 404 if not found.</returns>
        </member>
        <member name="M:GieldaL2.API.Controllers.UsersController.Delete(System.Int32)">
            <summary>
            Deletes user with the specified ID.
            </summary>
            <param name="id">ID of the user which will be deleted.</param>
            <returns>Backend statistics if user has been deleted with success, otherwise 404 if not found.</returns>
        </member>
        <member name="T:GieldaL2.API.Filters.BackendTimeFilter">
            <summary>
            Filter calculating total time spent on the backend logic.
            </summary>
        </member>
        <member name="M:GieldaL2.API.Filters.BackendTimeFilter.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Initializes a new instance of the <see cref="M:GieldaL2.API.Filters.BackendTimeFilter.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)"/> class.
            </summary>
            <param name="filterContext">Filter context passed by the ASP engine.</param>
        </member>
        <member name="M:GieldaL2.API.Filters.BackendTimeFilter.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Called after the action executes, before the action result.
            </summary>
            <param name="context">The <see cref="T:Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext" />.</param>
        </member>
        <member name="P:GieldaL2.API.ViewModels.View.StatisticsViewModel`1.BackendTime">
            <summary>
            Time the request been processed. **This field is populated automatically by BackendTimeFilter**
            </summary>
        </member>
        <member name="P:GieldaL2.API.ViewModels.View.StatisticsViewModel`1.SelectsTime">
            <summary>
            Represents time it took DB to perform SELECT queries.
            </summary>
        </member>
        <member name="P:GieldaL2.API.ViewModels.View.StatisticsViewModel`1.UpdatesTime">
            <summary>
            Represents time it took DB to perform UPDATE queries.
            </summary>
        </member>
        <member name="P:GieldaL2.API.ViewModels.View.StatisticsViewModel`1.InsertsTime">
            <summary>
            Represents time it took DB to perform INSERT queries.
            </summary>
        </member>
        <member name="P:GieldaL2.API.ViewModels.View.StatisticsViewModel`1.DeletesTime">
            <summary>
            Represents time it took DB to perform DELETE queries.
            </summary>
        </member>
        <member name="P:GieldaL2.API.ViewModels.View.StatisticsViewModel`1.Data">
            <summary>
            Actual data of a response
            </summary>
        </member>
    </members>
</doc>
